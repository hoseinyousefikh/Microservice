// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserApp.Infra.Data.Db.SqlServer.Ef.DataDBContaxt;

#nullable disable

namespace UserApp.Infra.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.DTO.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("roles", "identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Employee role",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.AccountantUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("CanAuditRecords")
                        .HasColumnType("bit")
                        .HasColumnName("can_audit_records");

                    b.Property<bool>("CanGenerateInvoices")
                        .HasColumnType("bit")
                        .HasColumnName("can_generate_invoices");

                    b.Property<bool>("CanManagePayments")
                        .HasColumnType("bit")
                        .HasColumnName("can_manage_payments");

                    b.Property<bool>("CanViewFinancialReports")
                        .HasColumnType("bit")
                        .HasColumnName("can_view_financial_reports");

                    b.HasKey("Id");

                    b.ToTable("accountant_users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("int")
                        .HasColumnName("admin_level");

                    b.Property<bool>("CanManageProducts")
                        .HasColumnType("bit")
                        .HasColumnName("can_manage_products");

                    b.Property<bool>("CanManageUsers")
                        .HasColumnType("bit")
                        .HasColumnName("can_manage_users");

                    b.HasKey("Id");

                    b.ToTable("admin_users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int")
                        .HasColumnName("activity_status");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("ImageUploadDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("image_upload_date");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expiry");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.BuyerUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("LastPurchaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_purchase_date");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int")
                        .HasColumnName("loyalty_points");

                    b.Property<string>("PreferredPaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("preferred_payment_method");

                    b.Property<decimal>("TotalPurchases")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_purchases");

                    b.HasKey("Id");

                    b.ToTable("buyer_users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.EmployeeUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("department");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hire_date");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("position");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("salary");

                    b.HasKey("Id");

                    b.ToTable("employee_users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.SellerUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(5,4)")
                        .HasColumnName("commission_rate");

                    b.Property<DateTime?>("CurrentSessionStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("current_session_start");

                    b.Property<bool>("IsSubscriptionActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_subscription_active");

                    b.Property<int>("MaxLoginHours")
                        .HasColumnType("int")
                        .HasColumnName("max_login_hours");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_due_date");

                    b.Property<DateTime>("SubscriptionExpiry")
                        .HasColumnType("datetime2")
                        .HasColumnName("subscription_expiry");

                    b.Property<int>("SubscriptionPlan")
                        .HasColumnType("int")
                        .HasColumnName("subscription_plan");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_sales");

                    b.HasKey("Id");

                    b.ToTable("seller_users", "identity");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.WarehouseUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("CanManageInventory")
                        .HasColumnType("bit")
                        .HasColumnName("can_manage_inventory");

                    b.Property<bool>("CanManageShipments")
                        .HasColumnType("bit")
                        .HasColumnName("can_manage_shipments");

                    b.Property<bool>("CanProcessOrders")
                        .HasColumnType("bit")
                        .HasColumnName("can_process_orders");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id");

                    b.ToTable("warehouse_users", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.DTO.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.DTO.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.AccountantUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("AccountantUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.AccountantUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.AdminUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("AdminUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.AdminUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.BuyerUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("BuyerUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.BuyerUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.EmployeeUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.EmployeeUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.SellerUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("SellerUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.SellerUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.WarehouseUser", b =>
                {
                    b.HasOne("UserApp.Domain.Core.Home.Entities.ApplicationUser", "User")
                        .WithOne("WarehouseUser")
                        .HasForeignKey("UserApp.Domain.Core.Home.Entities.WarehouseUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserApp.Domain.Core.Home.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AccountantUser");

                    b.Navigation("AdminUser");

                    b.Navigation("BuyerUser");

                    b.Navigation("EmployeeUser");

                    b.Navigation("SellerUser");

                    b.Navigation("WarehouseUser");
                });
#pragma warning restore 612, 618
        }
    }
}
